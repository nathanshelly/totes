#! /usr/bin/env bash

# Determine which command is available to render the file
get_render_command() {
  if command -v mdcat > /dev/null; then
    echo 'mdcat'
  elif command -v bat > /dev/null; then
    echo 'bat'
  fi

  echo 'cat'
}

get_notes_path() {
  # location based on XDG directory specification
  # ref - https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
  local notes_path="${XDG_DATA_HOME:-$HOME/.local/share}/totes"
  if [[ ! -d $notes_path ]]; then
    echo "The notes directory - $notes_path - does not exist."
    # shellcheck disable=2016
    echo 'Try running the `install.sh` script again'
    # checks if this script is in a repo (should be true if it is symlinked)
    if git rev-parse HEAD > /dev/null 2>&1; then
      # display full path to install script if we can find it
      echo "path: $(git rev-parse --show-toplevel)/install.sh"
    fi
    exit 1
  fi
  printf "%s" "$notes_path"
}

get_suppressed_notes_registry_spec() {
  printf "%s/suppressed_note_registry" "$(get_notes_path)"
}

# Determine the next note to render
get_note_to_render() {

  notes_path="$(get_notes_path)"
  suppressed_files_registry_spec="$(get_suppressed_files_registry_spec)"
  if ! [[ -f "$suppressed_files_registry_spec" ]]; then
    # the suppressed_file_registry must not be empty
    echo "dummy-text-required-here" > "$suppressed_files_registry_spec"
  fi

  # ref - https://github.com/koalaman/shellcheck/issues/1247
  # shellcheck disable=2010
  note_to_render="$(ls -At -- "$notes_path"/*.md | grep -vFf "$suppressed_files_registry_spec" | tail -n 1)"
  printf "%s" "$note_to_render"
}

suppress_note() {
  # Consider only writing file if it's not already in suppressed_notes
  echo "$1" >> "$(get_suppressed_notes_registry_spec)"
}

render_command="$(get_render_command)"
note_to_render="$(get_note_to_render "$@")"

echo
"$render_command" "$note_to_render"
echo

printf "%s" " --> (n)ext, (q)uit, (r)emove from rotation, (x) save and quit "
read -r -s -n 1 user_action < /dev/tty

# ref - https://stackoverflow.com/a/37408702
if ! [[ "$user_action" =~ ^(x|X)$ ]]; then
  # update last read time to cycle through notes
  touch "$note_to_render"
fi
echo
case $user_action in
  n | N)
    totes
    ;;
  r | R)
    suppress_note "$note_to_render"
    ;;
  x | X) ;;
  *) ;;
esac
