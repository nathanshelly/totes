#! /usr/bin/env bash

# ref - https://stackoverflow.com/a/3601734
[[ -n "$1" ]] && optional_subject="$1"

get_notes_path() {
  # location based on XDG directory specification
  # ref - https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
  local notes_path="${XDG_DATA_HOME:-$HOME/.local/share}/totes"
  if ! [[ -d $notes_path ]]; then
    printf "The notes directory - %s - does not exist.\n" "$notes_path" >&2
    # shellcheck disable=2016
    printf 'Try running the `install.sh` script again' >&2
    # checks if this script is in a repo (should be true if it is symlinked)
    if git rev-parse HEAD > /dev/null 2>&1; then
      # display full path to install script if we can find it
      printf "path: %s/install.sh" "$(git rev-parse --show-toplevel)" >&2
    fi
    exit 1
  fi
  printf "%s" "$notes_path"
}

get_all_notes() {
  local notes_path
  notes_path="$(get_notes_path)" || exit $?
  if [[ -n "$optional_subject" ]]; then
    if ! ls "$notes_path/$optional_subject"/*.md > /dev/null 2>&1; then
      printf "No notes exist for subject '%s' @ '%s'\n" \
        "$optional_subject" \
        "$notes_path" \
        >&2
      exit 1
    fi

    printf "%s" "$(ls -At -- "$notes_path/$optional_subject"/*.md)"
  else
    printf "%s" "$(ls -At -- "$notes_path"/**/*.md)"
  fi
}

get_suppressed_note_registry_spec() {
  printf "%s/suppressed_note_registry" "$(get_notes_path)" || exit $?
}

suppress_note() {
  printf "%s\n" "$1" >> "$(get_suppressed_note_registry_spec)" || exit $?
}

# Determine the next note to render
get_note_to_render() {
  suppressed_note_registry_spec="$(get_suppressed_note_registry_spec)" || exit $?
  all_notes="$(get_all_notes)" || exit $?
  if [[ -f "$suppressed_note_registry_spec" ]]; then
    # remove any note with a match within the registry
    active_notes="$(grep -vFf "$suppressed_note_registry_spec" <<< "$all_notes")"
  fi
  # Tail active_notes if has a value;  otherwise, use all_notes
  # ref - https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02
  note_to_render="$(tail -n 1 <<< "${active_notes-$all_notes}")"
  if [[ -z $note_to_render ]]; then
    printf "No note found.  Perhaps they've all been removed from rotation.\n" >&2
    exit 1
  fi
  printf "%s" "$note_to_render"
}

# render the given note
render_single_note() {
  note="$1"
  if command -v mdcat > /dev/null; then
    mdcat "$note"
  elif command -v bat > /dev/null; then
    bat "$note"
  else
    cat "$note"
  fi
}

# render the next note
render_next_note() {
  # propagate errors
  note_to_render="$(get_note_to_render)" || exit $?
  render_single_note "$note_to_render"
}

echo
# "$render_command"
render_next_note
echo

printf "%s" " --> (n)ext, (q)uit, (r)emove and next, (x) save and quit "
read -r -s -n 1 user_action < /dev/tty

# ref - https://stackoverflow.com/a/37408702
if ! [[ "$user_action" =~ ^(x|X)$ ]]; then
  # update last read time to cycle through notes
  touch "$note_to_render"
fi
echo
case $user_action in
  n | N)
    totes "$@" # propagate arguments
    ;;
  r | R)
    suppress_note "$note_to_render"
    totes
    ;;
  x | X) ;;
  *) ;;
esac
